pragma solidity >=0.8.0 <0.9.0;

//SPDX-License-Identifier: MIT

contract Register {
    address public owner;
    address public studentID;
    mapping(address=>uint256) public addressToIndex;
    
    struct Student {
        uint256 studentID;
        uint256 percentage;
        string totalMarks;
    }
    Student[] public allStudents;

    constructor() {
        require(msg.sender == owner, "You are not the owner!");
    }

    modifier onlyOwner() {
        require(msg.sender == owner);
        _;
    }

    function idCheck(address _studentID) public view returns (bool) {
        uint256 index = addressToIndex[_studentID];
        return allStudents[index] ? true : false;
    }

    function register(
        address _studentID,
        uint256 _percentage,
        string calldata _marks
    ) public onlyOwner {
        require (idCheck(_studentID) = false, "Student is already registered");
        allStudents.push(studentID: _studentID, percentage: _percentage, totalMarks: _marks);
            
        addressToIndex[_studentID] = allStudents.length - 1;
      }

    function getStudentDetails(address memory _studentID) public view return(address studentID, uint256 percentage, string memory totalMarks){
      uint256 memory index;
      index = addressToIndex[_studentID];
      Student storage student = allStudents[index];
      
      return(student.studentId, student.percentage, student.totalMarks);
    }
}
